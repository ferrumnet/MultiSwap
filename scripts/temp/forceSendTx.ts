import { ethers } from "ethers";

// RPC endpoint URL
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x111111125421ca6dc452d289314280a0f8842a65",
    value: 0,
    data: "0x07ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000eb608fe026a4f54df43e57a881d2e8395652c58d00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000012d8850e16f5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002ce0000000000000000000000000000000000000000000002b000029600028000a007e5c0d200000000000000000000000000000000000000000000000000025c00004f02a000000000000000000000000000000000000000000000000000000000000ef317ee63c1e501a17afcab059f3c6751f5b64347b5a503c3291868af88d065e77c8cc2239327c5edb3a432268e583100a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000001df00013000a007e5c0d200000000000000000000000000000000000000000000000000010c0000d051000c8fa74c7b2de5a92b39217dc98d2d609439a2e5fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90044394747c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013548683ce9c0000000000000000000000000000000000000000000000000000000000000000410182af49447d8a07e3bd95bd0d56f35241523fbab100042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a007e5c0d200000000000000000000000000000000000000000000000000008b00004f02a000000000000000000000000000000000000000000000000000011a33ca5da0c2ee63c1e5007cccba38e2d959fe135e79aebb57ccb27b128358fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9410182af49447d8a07e3bd95bd0d56f35241523fbab100042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c061111111125421ca6dc452d289314280a0f8842a6500206b4be0b9111111125421ca6dc452d289314280a0f8842a65000000000000000000000000000000000000cec83fa6", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 300000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
