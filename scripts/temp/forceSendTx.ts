import { ethers } from "ethers";

// RPC endpoint URL
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x83EF51Ce32A4eFCD22e78f8d6856e057D0f53a5D",
    value: 100000000000,
    data: "0x874a900d0000000000000000000000000000000000000000000000000000000000000097000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000064000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000002105000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000eb608fe026a4f54df43e57a881d2e8395652c58d3ae43a6c07d5e61dd412af20dc223abd04be19cb21f91e109b0ed9afe1a0c66100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000008883800a8e00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000012708800000000000003b74a460db86e7fe4074e3c29d2fd0ed1d104c00e11a196bcec83fa60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000174876e7f1000000000000000000000000000000000000000000000000000000174876e7f10000000000000000000000000000000000000000000000000000000000004e20b30773c9debfbea7dbbe74ca2ec569f58f60f117edc8de7c5d4664133f5682ed000000000000000000000000000000000000000000000000000000006647498100000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eb608fe026a4f54df43e57a881d2e8395652c58d0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000bfbfe0e25835625efa98161e3286ca1290057e1a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000041547781f6f2fee6714cefad5173785e15e20290b32f94806a90e440630a39eb8e7c6c4aa542cc7a4b961e4f6815f9b92f2d7c14ea4d00c7a2b57f8f9fc1fce83f1b00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 300000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
