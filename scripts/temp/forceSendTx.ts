import { ethers } from "ethers";

// RPC endpoint URL
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"
// const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum
const rpcUrl = "https://optimism-mainnet.core.chainstack.com/7cb5109bd1c125224315d9b753cc0e45" // Optimism

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x47Bee1648Eb4B375E27038314738455419B3766b",
    value: 10,
    data: "0x2aecedbf000000000000000000000000fb58064d2a68b8616674b07b80a93ceb0ba67a6f000000000000000000000000000000000000000000000000000000000012e8f3000000000000000000000000000000000000000000000000000000000012755a0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000001600bbba716d515134bbd8b9b272e2bcf1d2972206ee8e215d31e6386d5d26d9cf400000000000000000000000000000000000000000000000000000000665a56440000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002a807ed2379000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000fb58064d2a68b8616674b07b80a93ceb0ba67a6f000000000000000000000000000000000000000000000000000000000012e8f3000000000000000000000000000000000000000000000000000000000012b89b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000015600000000000000000000000000000000000000000000013800010a00001a0020d6bdbf780b2c639c533813f4aa9d7837caf62653d097ff85512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd100b2c639c533813f4aa9d7837caf62653d097ff8500449908fc8b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e5800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000665910570020d6bdbf7894b008aa00579c1307b0ef2c499ad98a8ce58e58111111125421ca6dc452d289314280a0f8842a65000000000000000000007c2ad3dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413e347c74275ac36bbcb845a10cd1f43ae5bc24d52201158206000e04e0a244a86dcc3b5e27d44dbd7e749d4cb20f1d55b4f4ff492f59c74d1cd81e0d1e970d8b1c00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 3000000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
