import { ethers } from "ethers";

// RPC endpoint URL
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x04d4E91bb4C4c1d90149CFf98894a27b487470fA",
    value: 10,
    data: "0x8110ded800000000000000000000000000000000000000000000000000b89befa9233588000000000000000000000000000000000000000000000000000000000000d15b000000000000000000000000d4d42f0b6def4ce0383636770ef773390d85c61a000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000038000000000000000000000000a719b8ab7ea7af0ddb4358719a34631bb79d15dc000000000000000000000000cebb7265ed625f8df2336c00d0ec6656bea9e6bbe455acfa740433adf056177f2a53b58e695e3cc636a7f762b1480a96ab82e6ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000002a807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d4d42f0b6def4ce0383636770ef773390d85c61a000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000003221022e37029923ace4235d812273c5a42c322d00000000000000000000000004d4e91bb4c4c1d90149cff98894a27b487470fa00000000000000000000000000000000000000000000000000b89befa9233588000000000000000000000000000000000000000000000000000000000000d15b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000015800000000000000000000000000000000000000000000013a00010c00001a0020d6bdbf78d4d42f0b6def4ce0383636770ef773390d85c61a00a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae4071138002dc6c03221022e37029923ace4235d812273c5a42c322ddb86e7fe4074e3c29d2fd0ed1d104c00e11a196b0000000000000000000000000000000000000000000000000000000000000001d4d42f0b6def4ce0383636770ef773390d85c61a00206ae40711b8002625a0db86e7fe4074e3c29d2fd0ed1d104c00e11a196b111111125421ca6dc452d289314280a0f8842a65000000000000000000000000000000000000000000000000000000000000000182af49447d8a07e3bd95bd0d56f35241523fbab10020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e5831111111125421ca6dc452d289314280a0f8842a6500000000000000007c2ad3dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b89befa9233588000000000000000000000000000000000000000000000000000000000000d15b00000000000000000000000000000000000000000000000000bc81c9f3c840000000000000000000000000000000000000000000000000000cd3df9baedc9fcaa61b1995db5956db064e4adfdaaaed68f30f5f1f00e376cdb471d1d2dc0a786500000000000000000000000000000000000000000000000000000000664b392200000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000041dc16f9e4133790e3d9f47ea526084d8a2d8e17c8160d1f04e1b658d46d3f4881311f38ec12c757c8fdd382b375bfc61a33505fc8961e21dc902d2cd7e152c0fa1b00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 300000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
