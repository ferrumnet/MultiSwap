import { ethers } from "ethers";

// RPC endpoint URL
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_KEY0!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x6e84E6c702E6748C255A7A46347B01Db7CA95Bf3", // Address of the receiver or contract
    value: 10, // Amount to send (for ETH transfers)
    data: "0x705b5dc800000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000001c14cf000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000002105000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000eedfdd620629c7432970d22488124fc92ad6d42624b74e5f116df9e0a3c281fe1a03f4ea799111b5195d41cfbbd1461d2b3a61dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000050807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000006e84e6c702e6748c255a7a46347b01db7ca95bf300000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000001c14cf0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003a300000000000000000000000000000000000000000000038500035700001a0020d6bdbf78fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900a098aed1050000000000000000090100000000000000000000000000000000000000000000000000030f00024000a0bdb69421fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb96e84e6c702e6748c255a7a46347b01db7ca95bf30000000000000000000000000000000000000000000000000000000000035c390000000000000000000000000000000000000000000000000000000001d400a007e5c0d20000000000000000000000000000000000000000000000000001b000014d00a0c9e75c4800000000000000002d0500000000000000000000000000000000000000000000000000011f0000d051000c8fa74c7b2de5a92b39217dc98d2d609439a2e5fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90044394747c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000001ee63c1e5007cccba38e2d959fe135e79aebb57ccb27b128358fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a00000000000000000000000000000000000000000000000000000000000000001ee63c1e581b1026b8e7276e7ac75410f1fcbbe21796e8f752682af49447d8a07e3bd95bd0d56f35241523fbab1111111125421ca6dc452d289314280a0f8842a6500a0bdb69421fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb96e84e6c702e6748c255a7a46347b01db7ca95bf3000000000000000000000000000000000000000000000000000000000018b89500000000000000000000000000000000000000000000000000000000006302a00000000000000000000000000000000000000000000000000000000000000001ee63c1e580a17afcab059f3c6751f5b64347b5a503c3291868fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9111111125421ca6dc452d289314280a0f8842a650020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e5831111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000007c2ad3dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000001c14cf00000000000000000000000000000000000000000000000000000000001c14cf00000000000000000000000000000000000000000000000000000000001c14cf0dc18c11d3adbc5382dd14546f32b9076a1bc278aeecf0584af0e82e13defc57000000000000000000000000000000000000000000000000000000006645de9f000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041eeb317215239eb9afa33e193d5017b157bdb65e8edafc9673bd61f443467e5d41f897c3c5a3efdd5123df63158f2a3c0b969bd6dcd0fac99b4220e6388e3617d1b00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 300000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
